import MetaTrader5 as mt5
from sqlalchemy.exc import NoResultFound
from config import db_session, session_start_time
from data.models import Ticket, User


def initialize_mt5():
    if not mt5.initialize():
        print("initialize() failed, error code =", mt5.last_error())
        return None
    return mt5


def login_mt5(account, server, password):
    authorized = mt5.login(account, server=server, password=password)
    if authorized:
        return True
    else:
        print("failed to connect at account #{}, error code: {}".format(account, mt5.last_error()))
        return False


def shutdown_mt5():
    mt5.shutdown()


def connect(account, server, password):
    mt5_instance = initialize_mt5()
    if mt5_instance:
        connected = login_mt5(account, server, password)
        if connected:
            return True
        else:
            shutdown_mt5()
    return False


async def create_and_check_position(position):
    position_mt5 = position[7]

    try:
        ticket_object = db_session.query(Ticket).filter_by(position=position_mt5).first()

        if not ticket_object:

            ticket_object = Ticket(position=position_mt5)
            db_session.add(ticket_object)

            db_session.commit()
        else:
            pass
    except NoResultFound:
        print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å")
        db_session.rollback()


async def position_get():
    try:
        positions = mt5.positions_get()
        if not positions:
            pass
        elif len(positions) > 0:
            for position in positions:
                await create_and_check_position(position)

        all_position = await get_all_tickets_from_database()
        for pos in all_position:
            closed_orders = mt5.history_deals_get(position=pos.position)
            if len(closed_orders) > 1:
                await process_closed_orders(closed_orders, session_start_time)
    except Exception as e:
        print(f"An error occurred in position_get: {e}")



from datetime import datetime, timedelta

async def process_closed_orders(orders, session_start_time):
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º (symbol)
    open_trades = {}
    session_profit = 0  # –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ —Å –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏

    for order in orders:
        ticket = order[0]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏ (ticket)
        symbol = order[15]  # –°–∏–º–≤–æ–ª (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞)
        trade_type = order[4]  # –¢–∏–ø —Å–¥–µ–ª–∫–∏ (0 - –æ—Ç–∫—Ä—ã—Ç–∏–µ, 1 - –∑–∞–∫—Ä—ã—Ç–∏–µ)
        volume = order[9]  # –û–±—ä–µ–º —Å–¥–µ–ª–∫–∏
        profit = order[13]  # –ü—Ä–∏–±—ã–ª—å
        time = order[2]  # –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ (timestamp)

        ticket_to_delete = db_session.query(Ticket).filter_by(position=order[7]).first()

        if trade_type == 0:  # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏
            if ticket not in open_trades:
                open_trades[ticket] = {
                    'symbol': symbol,
                    'buy_volume': volume,
                    'sell_volume': 0,
                    'total_profit': 0,
                    'open_time': datetime.fromtimestamp(time)
                }
        elif trade_type == 1:  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏
            for open_ticket, open_trade in sorted(open_trades.items()):
                if open_trade['symbol'] == symbol:
                    remaining_buy_volume = open_trade['buy_volume'] - open_trade['sell_volume']
                    if volume <= remaining_buy_volume:
                        open_trade['sell_volume'] += volume
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏
                        profit_percentage = 100 * float(profit) / 1000
                        open_trade['total_profit'] += profit_percentage
                        session_profit += profit_percentage

                        if open_trade['sell_volume'] == open_trade['buy_volume']:
                            # –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                            trade_time = (datetime.fromtimestamp(time) - open_trade['open_time']).seconds
                            print(f"üì£ –°–¥–µ–ª–∫–∞ #{open_ticket} –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                                  f"–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {trade_time}—Å–µ–∫\n"
                                  f"{symbol} + {profit_percentage:.2f}%\n"
                                  f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ—Å—Å–∏–∏: {session_profit:.2f}%|")
                            db_session.delete(ticket_to_delete)
                            db_session.commit()
                            del open_trades[open_ticket]
                        break
                    else:
                        # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫—É–ø–ª–µ–Ω–Ω–æ–µ, —Ä–∞–∑–¥–µ–ª—è–µ–º —Å–¥–µ–ª–∫—É –Ω–∞ –¥–≤–µ
                        volume_to_close = remaining_buy_volume
                        open_trade['sell_volume'] += volume_to_close
                        volume -= volume_to_close
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —á–∞—Å—Ç–∏ —Å–¥–µ–ª–∫–∏
                        profit_percentage_for_part = 100 * float(profit) / 1000
                        open_trade['total_profit'] += profit_percentage_for_part
                        session_profit += profit_percentage_for_part

                        trade_time = (datetime.fromtimestamp(time) - open_trade['open_time']).seconds
                        print(f"üì£ –°–¥–µ–ª–∫–∞ #{open_ticket} –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                              f"–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {trade_time}—Å–µ–∫\n"
                              f"{symbol} + {profit_percentage_for_part:.2f}%\n"
                              f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ—Å—Å–∏–∏: {session_profit:.2f}%|")

                        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–±—ä–µ–º –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É
                        if volume > 0:
                            new_ticket = max(open_trades.keys()) + 1  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏
                            open_trades[new_ticket] = {
                                'symbol': symbol,
                                'buy_volume': volume,
                                'sell_volume': volume,
                                'total_profit': 0,
                                'open_time': datetime.fromtimestamp(time)
                            }
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏
                            profit_percentage_for_remaining = 100 * float(profit) / 1000
                            open_trades[new_ticket]['total_profit'] += profit_percentage_for_remaining
                            session_profit += profit_percentage_for_remaining

                            print(f"üì£ –°–¥–µ–ª–∫–∞ #{new_ticket} –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                                  f"–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {trade_time}—Å–µ–∫\n"
                                  f"{symbol} + {profit_percentage_for_remaining:.2f}%\n"
                                  f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ—Å—Å–∏–∏: {session_profit:.2f}%|")
                            db_session.delete(ticket_to_delete)
                            db_session.commit()
                        break


async def get_all_tickets_from_database():
    try:
        tickets = db_session.query(Ticket).all()
        return tickets

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []



# –ü–†–û–•–û–î–ò–¢ –ü–û 3 –¢–ï–°–¢–ê–ú
# async def process_closed_orders(orders):
#     # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º (symbol)
#     open_trades = {}
#
#     for order in orders:
#         ticket = order[0]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏ (ticket)
#         symbol = order[15]  # –°–∏–º–≤–æ–ª (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞)
#         trade_type = order[4] # –¢–∏–ø —Å–¥–µ–ª–∫–∏ (0 - –æ—Ç–∫—Ä—ã—Ç–∏–µ, 1 - –∑–∞–∫—Ä—ã—Ç–∏–µ)
#         volume = order[9]  # –û–±—ä–µ–º —Å–¥–µ–ª–∫–∏
#         profit = order[13]  # –ü—Ä–∏–±—ã–ª—å
#         time = order[2]  # –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ (timestamp)
#
#         if trade_type == 0:  # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏
#             if ticket not in open_trades:
#                 open_trades[ticket] = {
#                     'symbol': symbol,
#                     'buy_volume': volume,
#                     'sell_volume': 0,
#                     'total_profit': 0,
#                     'open_time': time
#                 }
#         elif trade_type == 1:  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏
#             for open_ticket, open_trade in sorted(open_trades.items()):
#                 if open_trade['symbol'] == symbol:
#                     remaining_buy_volume = open_trade['buy_volume'] - open_trade['sell_volume']
#                     if volume <= remaining_buy_volume:
#                         open_trade['sell_volume'] += volume
#                         # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏
#                         initial_deposit = 1000  # –í–∞—à –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
#                         profit_percentage = 100 * float(profit) / initial_deposit
#                         open_trade['total_profit'] += profit_percentage
#
#                         if open_trade['sell_volume'] == open_trade['buy_volume']:
#                             # –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –¥–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#                             print(f"–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è {open_ticket}. "
#                                   f"–ö—É–ø–ª–µ–Ω–æ: {open_trade['buy_volume']} —à—Ç. "
#                                   f"–ü—Ä–æ–¥–∞–Ω–æ: {open_trade['sell_volume']} —à—Ç. "
#                                   f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: {open_trade['total_profit']:.3f}% ")
#                             del open_trades[open_ticket]
#                             break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –∑–∞–∫—Ä—ã–ª–∏ –æ–¥–Ω—É –∏–∑ —Å–¥–µ–ª–æ–∫
#                         else:
#                             pass
#                         break
#                     else:
#                         print(f"–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ–¥–∞–∂–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ ({volume} —à—Ç.) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({remaining_buy_volume} —à—Ç.) "
#                               f"–¥–ª—è —Å–¥–µ–ª–∫–∏ —Å {symbol}. –ü—Ä–æ–¥–∞–∂–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—ä–µ–º–∞.")
#                         # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
#                         open_trades[ticket] = {
#                             'symbol': symbol,
#                             'buy_volume': volume,
#                             'sell_volume': 0,
#                             'total_profit': 0,
#                             'open_time': time
#                         }
#                         break
#                         # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏